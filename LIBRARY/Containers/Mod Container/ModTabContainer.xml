<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="Containers/Mod Container/ModTabContainer" itemID="63b187bd-00000340" lastModified="1672658390">
  <timeline>
    <DOMTimeline name="ModTabContainer">
      <layers>
        <DOMLayer name="Actions" color="#00FFFF" current="true" isSelected="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[// Adds mod tab to container
var modTabs: Array = new Array();
tabTemplate.visible = false;

var tabPages: Array = new Array();
var currentPage: int = 0;
var isInitialised: Boolean;

butNext.Connect(nextPage);
butPrev.Connect(previousPage);

function initContainer(): void {
	butNext.disable();
	butNext.visible = false;
	
	butPrev.disable();
	butPrev.visible = false;
	
	isInitialised = true;
}

// Create and add mod tab to container
function addMod(mod: Dictionary, modIdx: int, baseMod: MovieClip): void {
	if (!isInitialised)
		initContainer();

	var tab: ModTab = new ModTab();
	tab.name = ("tabMods" + modIdx);
	tab.visible = true;

	tab.initModTab(modIdx, baseMod);
	tab.txtModName.text = mod["Name"];
	tab.txtModDescription.text = mod["Description"];

	if (mod["Enabled"])
		tab.forceSwitch(true);
	else
		tab.forceSwitch(false);


	// Add new page when more than 3 mods are trying to be added per page
	if (modTabs.length == 3) {
		// Enable next button
		butNext.enable();
		butNext.visible = true;
		butPrev.visible = true;
		modTabs = new Array();
		tabPages.push(modTabs);
		// Make tab of new page invisible (Only visible when page is selected)
		tab.visible = false;
	}

	modTabs.push(tab);
	this.addChild(tab)

	tab.alpha = 1;
	tab.x = 0;

	tab.y = (((modTabs.length - 1) % 3) * tabTemplate.height) + 5;

	// If no page was created
	if (tabPages.length == 0)
		tabPages.push(modTabs);
}

// Go to next page
function nextPage(): void {
	// Hide tabs for the page that will become the previous page
	for (var i: int = 0; i < tabPages[currentPage].length; i++) {
		tabPages[currentPage][i].visible = false;
	}

	currentPage++;
	// Disable the next button if the page is last one
	if (currentPage >= tabPages.length - 1) {
		butNext.disable();
		currentPage = tabPages.length - 1;
	}

	// Show tabs for the next page
	for (var i: int = 0; i < tabPages[currentPage].length; i++) {
		tabPages[currentPage][i].visible = true;
	}
	// Enable the previous button
	butPrev.enable();

}

// Go to previous page
function previousPage(): void {
	// Hide tabs for the page that will become the next page
	for (var i: int = 0; i < tabPages[currentPage].length; i++) {
		tabPages[currentPage][i].visible = false;
	}

	currentPage--;
	// Disable the previous button if the page is first one
	if (currentPage <= 0) {
		butPrev.disable();
		currentPage = 0;
	}
	// Show tabs for the previous page
	for (var i: int = 0; i < tabPages[currentPage].length; i++) {
		tabPages[currentPage][i].visible = true;
	}
	// Enable the next button
	butNext.enable();

}

stop();]]></script>
              </Actionscript>
              <elements>
                <DOMSymbolInstance libraryItemName="Containers/Mod Container/ModTab" name="tabTemplate" selected="true">
                  <transformationPoint>
                    <Point x="366.95" y="52.8"/>
                  </transformationPoint>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="UI/Buttons/ArrowBut/ArrowButton" name="butPrev">
                  <matrix>
                    <Matrix a="-0.840805053710938" d="0.840682983398438" tx="486.95" ty="392.45"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="39.7" y="35.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
                <DOMSymbolInstance libraryItemName="UI/Buttons/ArrowBut/ArrowButton" name="butNext">
                  <matrix>
                    <Matrix a="0.840789794921875" d="0.8406982421875" tx="506.95" ty="392.45"/>
                  </matrix>
                  <transformationPoint>
                    <Point x="39.95" y="35.05"/>
                  </transformationPoint>
                </DOMSymbolInstance>
              </elements>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>