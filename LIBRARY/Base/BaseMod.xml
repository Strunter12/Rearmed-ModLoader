<DOMSymbolItem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://ns.adobe.com/xfl/2008/" name="Base/BaseMod" itemID="63b075d3-00000173" lastModified="1672566405">
  <timeline>
    <DOMTimeline name="BaseMod">
      <layers>
        <DOMLayer name="Actions1" color="#00FFFF" current="true" isSelected="true" autoNamed="false">
          <frames>
            <DOMFrame index="0" keyMode="9728">
              <Actionscript>
                <script><![CDATA[/* BASE MOD FOR LOADING OTHER MODS WHILE IN THE GAME
* Can work as template for other mods
*/
import flash.display.MovieClip;
import flash.display.Loader;
import flash.events.Event;

CONFIG::AIR {
	import flash.filesystem.File;
	import flash.filesystem.FileMode;
	import flash.filesystem.FileStream;
}

// OBLIGATORY VARS:
var game: MovieClip; // MUST BE IN MOD
var modName: String = "Base Mod"; // MUST BE IN MOD
var modDescription: String = "Base mod for loading other mods";
var _root:MovieClip = MovieClip(root);


// NON OBLIGATORY:
var modFiles:Array = new Array();
var modLoader:Loader;
var modContents:Array = new Array();

// Recieves the game Main Timeline (MUST BE IN ANY MOD)
function initMod(target: MovieClip): void {
	_root.traceLog("Initializing " + modName);
	game = target;
}

CONFIG::AIR {
	// TODO: FINISH READING MODS
	// Get mod files (.SWF)
	function getMods(): void {
		_root.traceLog("Getting mods");
		var modFolder:File = File.applicationDirectory.resolvePath("AWW_Mods");
		var files:Array = modFolder.getDirectoryListing();
		for (var i:uint = 0; i < files.length; i++) {
			if (files[i].name.substring(files[i].name.length - 4, files[i].name.length) == ".swf")
			{
				_root.traceLog("Detected mod: " + files[i].name);
				modFiles.push(files[i]);
			}
		}
	}
	getMods();
}

var modsLoadedCount = 0;

// Loads mods (Calls itself until all mods are loaded)
function loadMods(modIdx:uint = 0): void {
	_root.traceLog("Loading mods");
	modLoader = new Loader();
	var swfRequest:URLRequest = new URLRequest(modFiles[modIdx].nativePath);
	modLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, modLoaded, false, 0, true);
	
	modLoader.load(swfRequest);
}

// Called when a mod is done loading
function modLoaded(evt:Event): void {
	_root.traceLog(modFiles[modsLoadedCount].name + " has loaded");
	var modTarget:MovieClip = modLoader.content as MovieClip;
	
	modContents.push(modTarget);
	modContents[modsLoadedCount].initMod(game);
	this.addChild(modContents[modsLoadedCount]);
	modsLoadedCount++;
	
	// Stop loading mods after loading last mod
	if (modsLoadedCount == modFiles.length) {
		MovieClip(root).gotoAndPlay(2);
		return;
	}
	
	loadMods(modsLoadedCount);
}

function runAfterInitMods(): void {
	_root.traceLog("Calling after init functions in mods");
	for (var i:uint = 0; i < modContents.length; i++) {
		modContents[i].afterInits();
	}
}]]></script>
              </Actionscript>
              <elements/>
            </DOMFrame>
          </frames>
        </DOMLayer>
      </layers>
    </DOMTimeline>
  </timeline>
</DOMSymbolItem>